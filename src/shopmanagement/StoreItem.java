/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopmanagement;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ssohan
 */
public class StoreItem extends javax.swing.JFrame {

    /**
     * Creates new form StoreItem
     */
    public StoreItem() {
        initComponents();
    }
    int x;

    public void run(int z) {
        x = z;
        load.doClick();
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        na = new javax.swing.JTextField();
        qa = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        te = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        pr = new javax.swing.JTextField();
        load = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Name", "Quantity", "Price", "Details"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(table);

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Load selected");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        na.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                naActionPerformed(evt);
            }
        });

        jLabel2.setText("Product Name:");

        jLabel3.setText("Quantity");

        jButton3.setText("Add");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Edit");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Delete");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Back");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel4.setText("Details");

        te.setColumns(20);
        te.setRows(5);
        jScrollPane2.setViewportView(te);

        jLabel5.setText("Price per unit");

        load.setText("Clear");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(load)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jScrollPane2))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(qa, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                                    .addComponent(na)
                                    .addComponent(pr)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(na, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(qa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(pr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addComponent(jLabel4)))
                        .addGap(41, 41, 41)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jButton5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton1)
                        .addComponent(jButton6)
                        .addComponent(load))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        String name = na.getText();
        String price = pr.getText();
        String quantity = qa.getText();
        String text = te.getText();
        //String mobile = mo.getText();
        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        Statement ps = null;

        String SQL = "insert into MYDB.dbo.Product (name,Quantitiy,price,Details) values"
                + " ('" + name + "','" + quantity + "','" + price + "','" + text + "')";
        try {
            //String SQL = "SELECT * FROM worker";
            ps = conn.createStatement();
            ps.executeUpdate(SQL);
            JOptionPane.showMessageDialog(null,
                    "File Added",
                    "FIle",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            conn.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        load.doClick();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        switch (x) {
            case 1:
                new Manager().run();
                break;
            case 2:
                new Storehouse().run();
                break;
            case 3:
                new Owner().run();
                break;
            default:
                break;
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void naActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_naActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_naActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        PreparedStatement ps = null;

        String SQL = "Select * FROM MYDB.dbo.Product";
        //String SQL = "SELECT * FROM worker";
        try {
            ps = conn.prepareStatement(SQL);
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        try {
            rs = ps.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        DefaultTableModel model = new DefaultTableModel();

        model.addColumn("Id");
        model.addColumn("Name");
        model.addColumn("Quantity");
        model.addColumn("Price");
        model.addColumn("Details");
        //model.addColumn("Mobile");

        try {
            while (rs.next()) {
                int id = rs.getInt(1);
                String name = rs.getString(2);
                int quantity = rs.getInt(3);
                float price = rs.getFloat(4);
                String text = rs.getString(5);
                //String mobile = rs.getString(6);
                model.addRow(new Object[]{id, name, quantity, price, text});
            }
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        table.setModel(model);
        na.setText("");
        qa.setText("");
        pr.setText("");
        te.setText("");
        try {
            conn.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_loadActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:

        int row = table.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();

        if (row != -1) {
            na.setText(tm.getValueAt(row, 1).toString().trim());
            qa.setText(tm.getValueAt(row, 2).toString().trim());
            pr.setText(tm.getValueAt(row, 3).toString().trim());
            te.setText(tm.getValueAt(row, 4).toString().trim());
        } else {
            JOptionPane.showMessageDialog(null,
                    "No Row is selected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }

        /*        String p = ii.getText();
        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
        Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
        conn = DriverManager.getConnection(url);
        System.out.println("connected");
        } catch (SQLException ex) {
        JOptionPane.showMessageDialog(null,
        "Not connected",
        "Error",
        JOptionPane.WARNING_MESSAGE);
        Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
        Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        PreparedStatement ps = null;
        
        String SQL = "Select * FROM MYDB.dbo.Product where id = " + p;
        //String SQL = "SELECT * FROM worker";
        try {
        ps = conn.prepareStatement(SQL);
        } catch (SQLException ex) {
        Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        try {
        rs = ps.executeQuery();
        } catch (SQLException ex) {
        Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
        int k = 0;
        while (rs.next()) {
        int id = rs.getInt(1);
        String name = rs.getString(2);
        String quantity = rs.getString(3);
        String price = rs.getString(4);
        //int pos = rs.getInt(5);
        String text = rs.getString(5);
        k = 1;
        na.setText(name.trim());
        qa.setText(quantity.trim());
        pr.setText(price.trim());
        te.setText(text.trim());
        //mo.setText(mobile.trim());
        
        }
        if (k == 0) {
        JOptionPane.showMessageDialog(null,
        "Id not found!!",
        "Error",
        JOptionPane.WARNING_MESSAGE);
        }
        } catch (SQLException ex) {
        Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
        conn.close();
        ps.close();
        } catch (SQLException ex) {
        Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }*/
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        
                int row = table.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        String pp = null;
        if (row != -1) {
           pp = tm.getValueAt(row, 0).toString().trim();
        } else {
            JOptionPane.showMessageDialog(null,
                    "No Row is selected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
        
        
        String name = na.getText();
        String quantity = qa.getText();
        String price = pr.getText();
        String text = te.getText();
        //String mobile = mo.getText();
        //int p = Integer.parseInt(pos);
        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        Statement ps = null;

        String SQL = "UPDATE MYDB.dbo.Product set name = '" + name + "', quantitiy = '" + quantity + "', price = '" + price
                + "',Details = '" + text + "' where id = " + pp;
        try {
            //String SQL = "SELECT * FROM worker";
            ps = conn.createStatement();
            ps.executeUpdate(SQL);
            JOptionPane.showMessageDialog(null,
                    "File Edited",
                    "FIle",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    "WRONG ID",
                    "ERROR",
                    JOptionPane.WARNING_MESSAGE);
        }

        try {
            conn.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        load.doClick();
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        int row = table.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        String pp = null;
        if (row != -1) {
           pp = tm.getValueAt(row, 0).toString().trim();
        } else {
            JOptionPane.showMessageDialog(null,
                    "No Row is selected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }
        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        Statement ps = null;

        String SQL = "DELETE FROM MYDB.dbo.Product where id = " + pp;
        try {
            //String SQL = "SELECT * FROM worker";
            ps = conn.createStatement();
            ps.executeUpdate(SQL);
            JOptionPane.showMessageDialog(null,
                    "File DELETED",
                    "FIle",
                    JOptionPane.WARNING_MESSAGE);
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null,
                    "ID NOT FOUND",
                    "ERROR",
                    JOptionPane.WARNING_MESSAGE);
        }

        try {
            conn.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        load.doClick();
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JButton load;
    private javax.swing.JTextField na;
    private javax.swing.JTextField pr;
    private javax.swing.JTextField qa;
    private javax.swing.JTable table;
    private javax.swing.JTextArea te;
    // End of variables declaration//GEN-END:variables
}
