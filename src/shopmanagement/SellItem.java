/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package shopmanagement;

import java.io.FileOutputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 *
 * @author ssohan
 */
public class SellItem extends javax.swing.JFrame {

    /**
     * Creates new form SellItem
     */
    public SellItem() {
        initComponents();
    }
    int x;
    float total = 0;

    public void run() {
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        na = new javax.swing.JTextField();
        mo = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        ii = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        qa = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        t = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        load = new javax.swing.JButton();
        m = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Customer Name");

        jLabel3.setText("Mobile Number");

        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        ii.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                iiActionPerformed(evt);
            }
        });

        jButton2.setText(">");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Product ID");

        jLabel5.setText("Quantity");

        jButton3.setText("<");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Print/Done");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        t.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        t.setText("Total Money : ");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Product", "Quantity", "Per unit Price", "Total"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.Float.class, java.lang.Float.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(table);

        load.setText("New Order");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        m.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        m.setText("0");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(60, 60, 60)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2))
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(na, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                                .addComponent(mo))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(ii, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(qa, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton2)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(163, 163, 163)
                        .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(m)
                        .addGap(85, 85, 85)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(na, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(mo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ii, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton2)
                            .addComponent(jLabel4)
                            .addComponent(qa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 243, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(t, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(m)))
                        .addGap(18, 18, 18)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void iiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_iiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_iiActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Salesman().run();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        // TODO add your handling code here:
        new SellItem().run();
        this.dispose();

    }//GEN-LAST:event_loadActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        String p_id = ii.getText();
        String quantity = qa.getText();
        int q = Integer.parseInt(quantity);
        if (!"".equals(p_id) && !"".equals(quantity)) {
            Connection conn = null;
            String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
            try {
                Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
                conn = DriverManager.getConnection(url);
                System.out.println("connected");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null,
                        "Not connected",
                        "Error",
                        JOptionPane.WARNING_MESSAGE);
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            }

            PreparedStatement ps = null;

            String SQL = "Select * FROM MYDB.dbo.Product where id = " + p_id;
            //String SQL = "SELECT * FROM worker";
            try {
                ps = conn.prepareStatement(SQL);
            } catch (SQLException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            }
            ResultSet rs = null;
            try {
                rs = ps.executeQuery();
            } catch (SQLException ex) {
                Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
            }

            DefaultTableModel model = (DefaultTableModel) table.getModel();

            /*            model.addColumn("Id");
            model.addColumn("Name");
            model.addColumn("Username");
            model.addColumn("Password");
            model.addColumn("Position");
            model.addColumn("Mobile");*/
            try {
                int k = 0;
                while (rs.next()) {
                    String name = rs.getString(2);
                    String quantitydb = rs.getString(3);
                    String price = rs.getString(4);
                    k = 1;
                    float p = Float.parseFloat(price);
                    int qz = Integer.parseInt(quantitydb);
                    if (qz >= q && q > 0) {
                        model.addRow(new Object[]{p_id, name, quantity, p, p * q});

                        qz = qz - q;
                        String z = Integer.toString(qz);

                        SQL = "UPDATE MYDB.dbo.Product set Quantitiy = " + z + " where id = " + p_id;

                        Statement psz;
                        psz = null;

                        try {
                            //String SQL = "SELECT * FROM worker";
                            psz = conn.createStatement();
                            psz.executeUpdate(SQL);
                        } catch (SQLException ex) {
                            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
                        }
                        total = total + (p * q);
                        m.setText(Float.toString(total));
                    } else {
                        JOptionPane.showMessageDialog(null,
                                qz + " Item left",
                                "Error",
                                JOptionPane.WARNING_MESSAGE);
                    }
                }
                if (k == 0) {
                    JOptionPane.showMessageDialog(null,
                            "ID not found",
                            "Error",
                            JOptionPane.WARNING_MESSAGE);
                }
            } catch (SQLException ex) {
                Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
            }
            table.setModel(model);
            //to.setText();
            try {
                conn.close();
                ps.close();
            } catch (SQLException ex) {
                Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            JOptionPane.showMessageDialog(null,
                    "Product and quantity field can't be empty",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:

        int row = table.getSelectedRow();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        String quantity = tm.getValueAt(row, 2).toString();
        String p_id = tm.getValueAt(row, 0).toString();
        String c = tm.getValueAt(row, 4).toString();
        float cc = Float.parseFloat(c);
        int q = Integer.parseInt(quantity);
        tm.removeRow(row);
        table.setModel(tm);

        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        PreparedStatement ps = null;

        String SQL = "Select * FROM MYDB.dbo.Product where id = " + p_id;
        //String SQL = "SELECT * FROM worker";
        try {
            ps = conn.prepareStatement(SQL);
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        try {
            rs = ps.executeQuery();
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        try {
            int k = 0;
            int qz = 0;
            while (rs.next()) {

                String z = rs.getString(3);
                qz = Integer.parseInt(z);
                k = 1;

            }
            if (k == 1) {
                int p = qz + q;
                String z = Integer.toString(p);
                SQL = "UPDATE MYDB.dbo.Product set Quantitiy = " + z + " where id = " + p_id;

                Statement psz;
                psz = null;

                try {
                    //String SQL = "SELECT * FROM worker";
                    psz = conn.createStatement();
                    psz.executeUpdate(SQL);
                } catch (SQLException ex) {
                    Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
                }
                total = total - cc;
                m.setText(Float.toString(total));
            }
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            conn.close();
            ps.close();
        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:

        Connection conn = null;
        String url = "jdbc:sqlserver://localhost:1433;databaseName=MYDB;user = asd;password=123";
        try {
            Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");
            conn = DriverManager.getConnection(url);
            System.out.println("connected");
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null,
                    "Not connected",
                    "Error",
                    JOptionPane.WARNING_MESSAGE);
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        Statement ps = null;
        try {
            String SQL = "insert into MYDB.dbo.orderID (z) values ('asdf')";
            //String SQL = "SELECT * FROM worker";
            ps = conn.createStatement();
            ps.executeUpdate(SQL);
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
        }

        PreparedStatement pz = null;

        String SQL = "SELECT * FROM  MYDB.dbo.orderID WHERE ID = (SELECT MAX(ID)  FROM MYDB.dbo.orderID) ";
        //String SQL = "SELECT * FROM worker";
        try {
            pz = conn.prepareStatement(SQL);
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }
        ResultSet rs = null;
        String id = null;
        try {
            rs = pz.executeQuery();
            int k = 1;
            while (rs.next()) {
                if (k == 1) {
                    k++;
                    id = rs.getString(1);
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(LogIn.class.getName()).log(Level.SEVERE, null, ex);
        }

        //System.out.println(id);
        //int z = Integer.parseInt(id);
        int count = table.getRowCount();
        Document document = new Document();
        DefaultTableModel tm = (DefaultTableModel) table.getModel();

        String name = na.getText();
        String mobile = mo.getText();
        Calendar cal = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String date = sdf.format(cal.getTime());
        String tz = m.getText();

        try {
            SQL = "insert into MYDB.dbo.report (name,mobile,total,order_id,date) values"
                    + "('" + name + "','" + mobile + "','" + tz + "','" + id + "','" + date + "')";
           // System.out.println(SQL);
            ps = conn.createStatement();
            ps.executeUpdate(SQL);
            ps.close();

        } catch (SQLException ex) {
            Logger.getLogger(SellItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        String PDF = id+".pdf";
        try {
            PdfWriter.getInstance(document, new FileOutputStream(PDF));
            document.open();
            PdfPTable tab = new PdfPTable(4);
            tab.addCell("Name");
            tab.addCell("Quantity");
            tab.addCell("Price per unit");
            tab.addCell("Total");
            for (int i = 0; i < count; i++) {
                String pid = tm.getValueAt(i,0).toString().trim();
                String zz = tm.getValueAt(i, 1).toString().trim();
                String quantity = tm.getValueAt(i, 2).toString().trim();
                String punit = tm.getValueAt(i, 3).toString().trim();
                String tot = tm.getValueAt(i, 4).toString().trim();

                try {
                    SQL = "insert into MYDB.dbo.orderItem (order_id,Pname,price,unit,total) values"
                    + "('" + id+ "','" + zz + "','" + punit + "','" + quantity + "','" + tot + "')";
                    System.out.println(SQL);
                    ps = conn.createStatement();
                    ps.executeUpdate(SQL);
                    ps.close();

                } catch (SQLException ex) {
                    Logger.getLogger(SellItem.class.getName()).log(Level.SEVERE, null, ex);
                }

                tab.addCell(zz);
                tab.addCell(quantity);
                tab.addCell(punit);
                tab.addCell(tot);

            }
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("Name:   " + na.getText()));
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("Mobile: " + mo.getText()));
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("Order:"));
            document.add(new Paragraph("\n"));
            document.add(tab);
            document.add(new Paragraph(t.getText() + "   " + m.getText()));
            document.add(new Paragraph("\n"));
            document.add(new Paragraph("\n"));
            document.close();
            if (Desktop.isDesktopSupported()) {
                try {
                    File myFile = new File(PDF);
                    Desktop.getDesktop().open(myFile);
                } catch (IOException ex) {
                    // no application registered for PDFs
                }
            }
        } catch (FileNotFoundException | DocumentException ex) {
            Logger.getLogger(SellItem.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
                conn.close();
                pz.close();
            } catch (SQLException ex) {
                Logger.getLogger(WorkerMangement.class.getName()).log(Level.SEVERE, null, ex);
            }

        load.doClick();


    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField ii;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton load;
    private javax.swing.JLabel m;
    private javax.swing.JTextField mo;
    private javax.swing.JTextField na;
    private javax.swing.JTextField qa;
    private javax.swing.JLabel t;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
